//
//  ContentView.swift
//  MoshimoBooks
//
//  Created by Ê∑±Êæ§‰ΩëÊ®π on 2021/08/28.
//

import SwiftUI


struct ContentView: View {
    @State private var isActive = false
    
    var body: some View {
        NavigationView{
            ZStack{
                Color.white.edgesIgnoringSafeArea(.all)
                
                VStack {
                    VStack {
                        NavigationLink(
                            destination: InfoView(),
                            label: {
                                Text("Â£≤„Çã")
                                    .font(.system(size: 40, weight: .bold, design: .default))
                                    .bold()
                                    .frame(width:200, height: 200)
                                    .background(Color.red)
                                    .foregroundColor(.white)
                                    .cornerRadius(100)
                                    .offset(y: -40)
                            })
                    }
                    
                    VStack {
                        NavigationLink(
                            destination: InfoView(),
                            label: {
                                Text("Ë≤∑„ÅÜ")
                                    .font(.system(size: 40, weight: .bold, design: .default))
                                    .bold()
                                    .frame(width:200, height: 200)
                                    .background(Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(100)
                                    .offset(y: -20)
                            })
                    
                    }
                    Text("Ë≤©Â£≤Â±•Ê≠¥")
                        .font(.system(size: 25, weight: .bold, design: .default))
                        .bold()
                        .frame(width:220, height: 40)
                        .background(Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .offset(y: +20)
                    Text("Ë≥ºÂÖ•Â±•Ê≠¥")
                        .font(.system(size: 25, weight: .bold, design: .default))
                        .bold()
                        .frame(width:220, height: 40)
                        .background(Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .offset(y: +30)
                    Text("„Ç¢„Ç´„Ç¶„É≥„Éà")
                        .font(.system(size: 25, weight: .bold, design: .default))
                        .bold()
                        .frame(width:220, height: 40)
                        .background(Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .offset(y: +40)
                }
            }
            .navigationBarTitle("„ÇÇ„Åó„ÇÇBooks üìö")
        }
    }
}

//struct ContentView: View {
//    var body: some View {
//        NavigationView{
//            Form {
//                VStack(alignment: .center) {
//                    NavigationLink(
//                        destination: InfoView(),
//    //                    destination: Text("destination"),
//                        label: {
//                            Button(action: {
//                                print("ÁôªÈå≤„Åó„Åæ„Åó„Åü")
//                            }, label: {
////                                HStack {
////                                    Image(systemName: "pencil")
//                                    Text("Â£≤„Çã")
//                                        .foregroundColor(.red)
//                                        .font(.title)
//                                        .frame(width: 300, height: 200, alignment: /*@START_MENU_TOKEN@*/.center/*@END_MENU_TOKEN@*/)
//                                        .overlay(
//                                            RoundedRectangle(cornerRadius: 40)
//                                                .stroke(Color.red, lineWidth: 2)
//                                        )
////                                }
//                            })
////                            Text("Â£≤„Çã")
////                                .bold()
////                                .frame(width:200, height: 200)
////                                .background(Color.blue)
////                                .foregroundColor(.white)
////                                .cornerRadius(100)
//    //                            .offset(y: -300)
//                        })
//                    }
//
//                NavigationLink(
//                    destination: InfoView(),
////                    destination: Text("destination"),
//                    label: {
//                        Button(action: {
//                            print("ÁôªÈå≤„Åó„Åæ„Åó„Åü")
//                        }, label: {
//                            HStack {
////                                Image(systemName: "pencil")
//                                Text("Ë≤∑„ÅÜ")
//                                    .foregroundColor(.blue)
////                                    .font(.title)
////                                    .frame(width: 200, height: 200, alignment: /*@START_MENU_TOKEN@*/.center/*@END_MENU_TOKEN@*/)
////                                    .overlay(
////                                        RoundedRectangle(cornerRadius: 100)
////                                            .stroke(Color.blue, lineWidth: 2)
////                                    )
//                            }
//                        })
//                        .foregroundColor(.blue)
//                        .font(.title)
//                        .frame(width: 300, height: 200, alignment: /*@START_MENU_TOKEN@*/.center/*@END_MENU_TOKEN@*/)
//                        .overlay(
//                            RoundedRectangle(cornerRadius: 40)
//                                .stroke(Color.blue, lineWidth: 2)
//                        )
////                        Text("Ë≤∑„ÅÜ")
////                            .bold()
////                            .frame(width:200, height: 200)
////                            .background(Color.blue)
////                            .foregroundColor(.white)
////                            .cornerRadius(100)
//                    })
//            }
////            .foregroundColor(.blue)
////            .background(Color.blue)
////            CircleTextView(select: "Ë≤∑„ÅÜ")
////                .offset(y: -60)
//            .navigationBarTitle("„ÇÇ„Åó„ÇÇBooks üìö")
//
//        }
//
//    }
//}


struct InfoView: View {

    @State private var isPresented = false
    @State private var isbn: String?
    @State private var foundBooks: Books?


    var body: some View {

//        NavigationView{
            Form{
//                Section(header:Text("SELECT MODE")) {
//                    Button(action: {
//                        print("Â£≤„Çã")
//                    }, label: {
//                        HStack {
//                            Image(systemName: "pencil")
//                            Text("Â£≤„Çã")
//                        }
//
//                    })
//                    Button(action: {
//                        print("Ë≤∑„ÅÜ")
//                    }, label: {
//                        HStack {
//                            Image(systemName: "pencil")
//                            Text("Ë≤∑„ÅÜ")
//                        }
//                    })
//
//                }
                Section(header:Text("Êú¨„ÅÆÊÉÖÂ†±")){
                    Text("\(foundBooks?.items.first?.volumeInfo.title ?? "„Çø„Ç§„Éà„É´")")
                    Text("\(foundBooks?.items.first?.volumeInfo.subtitle ?? "„Çµ„Éñ„Çø„Ç§„Éà„É´")")
                    Text("\(foundBooks?.items.first?.volumeInfo.authors.first ?? "ËëóËÄÖ")")

                }
                Section(header:Text("ËøΩÂä†ÊÉÖÂ†±")) {
                    Text("\(foundBooks?.items.first?.volumeInfo.publishedDate ?? "Âá∫ÁâàÊó•")")
                    Text("\(foundBooks?.items.first?.volumeInfo.pageCount ?? 0) „Éö„Éº„Ç∏")
                    Text("\(foundBooks?.items.first?.volumeInfo.language ?? "Ë®ÄË™û")")
                    Text("ISBN: \(isbn ?? "")")
                }

            }.navigationBarTitle("Êú¨„ÅÆÊÉÖÂ†± üìö")
            .navigationBarItems(trailing:
                                    Button(action: {
                                        self.isPresented.toggle()
                                    }) {
                                        Image(systemName: "barcode")
                                    }.sheet(isPresented: $isPresented) {
                                        BarCodeScanner(isbn: $isbn, foundBooks: $foundBooks)
                                    }
            )

//        }
        VStack {

//            // BUtton instance with closer
//            Button("ÁôªÈå≤", action:{
//                print("ÁôªÈå≤„Åó„Åæ„Åó„Åü")
//            })
//
//            // BUtton instance with trailing closer
//            Button("ÁôªÈå≤") {
//                print("ÁôªÈå≤„Åó„Åæ„Åó„Åü")
//            }

            // BUtton instance with label view
            NavigationLink(
//                destination: StatementView(),
                destination: Statement3View(),
                label: {
                    HStack {
                        Image(systemName: "pencil")
                        Text("Êú¨„ÅÆÁä∂ÊÖãÈÅ∏Êäû„Å∏ÈÄ≤„ÇÄ")
                    }
                })
//            Button(action: {
//
//                print("ÁôªÈå≤„Åó„Åæ„Åó„Åü")
//            }, label: {
//
//                HStack {
//                    Image(systemName: "pencil")
//                    Text("ÁôªÈå≤")
//                }
//            })
        }
    }
}


struct CircleTextView: View {
//    var color: Color
//    var number: Int
    var select: String
    
    var body: some View {
        ZStack {
            Circle()
                .frame(width: 200, height: 200)
                .foregroundColor(.blue)
            Text("\(select)")
                .foregroundColor(.white)
                .font(.system(size: 70, weight: .bold))
        }
    }
}


struct StatementView: View {

    @State private var isPresented = false
    @State private var isbn: String?
    @State private var foundBooks: Books?
    @State private var checked = false
    @State private var useYellowBackground = false

    var body: some View {

        NavigationView{
            List{
//                Section(header:Text("Êú¨„ÅÆÊÉÖÂ†±")){
//                    Text("\(foundBooks?.items.first?.volumeInfo.title ?? "Title")")
////                    Text("\(foundBooks?.items.first?.volumeInfo.subtitle ?? "Subtitle")")
//                    Text("\(foundBooks?.items.first?.volumeInfo.authors.first ?? "Authors")")
//
//                }
//
//                Spacer()

                Section(header:Text("Êú¨„ÅÆÁä∂ÊÖã„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ")) {
//                    ZStack {
//                    if useYellowBackground {
//                        Color(.white)
//                    } else {
//                        Color(.white)
//                    }
                    Button(action: {
                        print("Êñ∞ÂìÅÂêåÊßò")
                    }, label: {
                        
                        VStack {
                            Text("Êñ∞ÂìÅÂêåÊßò")
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                                .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                            
                            Text("„Åª„Å®„Çì„Å©Ë™≠„Åæ„Çå„ÅüÂΩ¢Ë∑°„Åå„Å™„ÅÑÂÆåÂÖ®„Å™Áä∂ÊÖã")
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                        }
                    })
//                    }
                    Button(action: {
                        print("ÈùûÂ∏∏„Å´ËâØ„ÅÑ")
                    }, label: {
                        VStack {
                            Text("ÈùûÂ∏∏„Å´ËâØ„ÅÑ")
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                                .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                            
                            Text("Êõ∏„ÅçËæº„Åø„ÇÑÁ∑öÂºï„Åç„Åå„Å™„Åè„ÄÅËÉåË°®Á¥ô„Å´ÂÇ∑„Åå„Å™„ÅÑ")
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                        }
                    })
                    Button(action: {
                        print("ËâØ„ÅÑ")
                    }, label: {
                        VStack {
                            Text("ËâØ„ÅÑ")
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                                .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                            
                            Text("Êõ∏„ÅçËæº„Åø„ÇÑÁ∑öÂºï„Åç„ÄÅËÉåË°®Á¥ô„Å´Â§öÂ∞ë„ÅÆÂÇ∑„Åå„ÅÇ„Çã")
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                        }
                    })
                    Button(action: {
                        print("ÂèØ")
                    }, label: {
                        VStack {
                            Text("ÂèØ")
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                                .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                            
                            Text("ÂÇ∑„ÇÑÊõ∏„ÅçËæº„Åø„ÅØ„ÅÇ„Çã„ÅåÊñáÂ≠ó„ÅØË™≠„ÇÄ„Åì„Å®„Åå„Åß„Åç„Çã")
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                        }
                    })
//                    VStack {
//                        Text("Êñ∞ÂìÅÂêåÊßò")
//                            .frame(maxWidth: .infinity, alignment: .leading)
//                            .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
//                            .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
//
//                        Text("„Åª„Å®„Çì„Å©Ë™≠„Åæ„Çå„ÅüÂΩ¢Ë∑°„Åå„Å™„ÅÑÂÆåÂÖ®„Å™Áä∂ÊÖã")
//                            .frame(maxWidth: .infinity, alignment: .leading)
//                            .font(.subheadline)
//                            .foregroundColor(.secondary)
//                    }
//                    VStack {
//                        Text("ÈùûÂ∏∏„Å´ËâØ„ÅÑ")
//                            .frame(maxWidth: .infinity, alignment: .leading)
//                            .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
//                            .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
//
//                        Text("Êõ∏„ÅçËæº„Åø„ÇÑÁ∑öÂºï„Åç„Åå„Å™„Åè„ÄÅËÉåË°®Á¥ô„Å´ÂÇ∑„Åå„Å™„ÅÑ")
//                            .frame(maxWidth: .infinity, alignment: .leading)
//                            .font(.subheadline)
//                            .foregroundColor(.secondary)
//                    }
//                    VStack {
//                        Text("ËâØ„ÅÑ")
//                            .frame(maxWidth: .infinity, alignment: .leading)
//                            .lineLimit(2)
//                            .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
//
//                        Text("Êõ∏„ÅçËæº„Åø„ÇÑÁ∑öÂºï„Åç„ÄÅËÉåÁóÖÊÄß„Å´Â§öÂ∞ë„ÅÆÂÇ∑„Åå„ÅÇ„Çã")
//                            .frame(maxWidth: .infinity, alignment: .leading)
//                            .font(.subheadline)
//                            .foregroundColor(.secondary)
//                    }
//                    VStack {
//                        Text("ÂèØ")
//                            .frame(maxWidth: .infinity, alignment: .leading)
//                            .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
//                            .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
//
//                        Text("ÂÇ∑„ÇÑÊõ∏„ÅçËæº„Åø„ÅØ„ÅÇ„Çã„ÅåÊñáÂ≠ó„ÅØË™≠„ÇÄ„Åì„Å®„Åå„Åß„Åç„Çã")
//                            .frame(maxWidth: .infinity, alignment: .leading)
//                            .font(.subheadline)
//                            .foregroundColor(.secondary)
//                    }
                    
                }
                
                Spacer()
                
                VStack {
                    NavigationLink(
                        destination: SendingView(),
                        label: {
                            Button(action: {
                                
                                print("ÂÄ§‰ªò„Åë")
                            }, label: {

                                HStack {
                                    Image(systemName: "pencil")
                                    Text("ÂÄ§‰ªò„Åë")
                                }
                            })
                    })
                }
                
            }
                
            }
//        }
            
            
//            // BUtton instance with closer
//            Button("ÁôªÈå≤", action:{
//                print("ÁôªÈå≤„Åó„Åæ„Åó„Åü")
//            })
//
//            // BUtton instance with trailing closer
//            Button("ÁôªÈå≤") {
//                print("ÁôªÈå≤„Åó„Åæ„Åó„Åü")
//            }

            // BUtton instance with label view
//            Button(action: {
//
//                print("ÂÄ§‰ªò„Åë")
//            }, label: {
//
//                HStack {
//                    Image(systemName: "pencil")
//                    Text("ÂÄ§‰ªò„Åë")
//                }
//            })
    }
}


struct Statement2View: View {
    @State var selected : Int? = 0
    var body: some View {
        
//        VStack {
//        EditButton()
        
        NavigationView {
        List(selection: $selected) {
            VStack {
                Text("Êú™ÈÅ∏Êäû")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                    .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                
                Text("Êú¨„ÅÆÁä∂ÊÖã„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }.tag(0)
            
            VStack {
                Text("Êñ∞ÂìÅÂêåÊßò")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                    .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                
                Text("„Åª„Å®„Çì„Å©Ë™≠„Åæ„Çå„ÅüÂΩ¢Ë∑°„Åå„Å™„ÅÑÂÆåÂÖ®„Å™Áä∂ÊÖã")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }.tag(1)
            
            VStack {
                Text("ÈùûÂ∏∏„Å´ËâØ„ÅÑ")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                    .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                
                Text("Êõ∏„ÅçËæº„Åø„ÇÑÁ∑öÂºï„Åç„Åå„Å™„Åè„ÄÅËÉåË°®Á¥ô„Å´ÂÇ∑„Åå„Å™„ÅÑ")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }.tag(2)
            
            VStack {
                Text("ËâØ„ÅÑ")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                    .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                
                Text("Êõ∏„ÅçËæº„Åø„ÇÑÁ∑öÂºï„Åç„ÄÅËÉåË°®Á¥ô„Å´Â§öÂ∞ë„ÅÆÂÇ∑„Åå„ÅÇ„Çã")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }.tag(3)
            
            VStack {
                Text("ÂèØ")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                    .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                
                Text("ÂÇ∑„ÇÑÊõ∏„ÅçËæº„Åø„ÅØ„ÅÇ„Çã„ÅåÊñáÂ≠ó„ÅØË™≠„ÇÄ„Åì„Å®„Åå„Åß„Åç„Çã")
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }.tag(4)
        }
//        }
        .environment(\.editMode, .constant(.active))
        .navigationBarTitle("Êú¨„ÅÆÁä∂ÊÖã„ÇíÈÅ∏Êäû")
//        }
        
        Spacer()
        NavigationLink(
            destination: SendingView(),
            label: {
                Button(action: {
                    
                    print("ÂÄ§‰ªò„Åë")
                }, label: {

                    HStack {
                        Image(systemName: "pencil")
                        Text("ÂÄ§‰ªò„Åë")
                    }
                })
        })
    }
    }
}

struct Statement3View: View {

    @State private var isPresented = false
    @State private var isbn: String?
    @State private var foundBooks: Books?
    @State private var checked = false
    @State private var useYellowBackground = false
    @State var selected : Int? = 0

    var body: some View {

//        NavigationView{
            List(selection: $selected) {
                VStack {
                    Text("Êú™ÈÅ∏Êäû")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                        .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                    
                    Text("Êú¨„ÅÆÁä∂ÊÖã„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }.tag(0)
                
                VStack {
                    Text("Êñ∞ÂìÅÂêåÊßò")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                        .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                    
                    Text("„Åª„Å®„Çì„Å©Ë™≠„Åæ„Çå„ÅüÂΩ¢Ë∑°„Åå„Å™„ÅÑÂÆåÂÖ®„Å™Áä∂ÊÖã")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }.tag(1)
                
                VStack {
                    Text("ÈùûÂ∏∏„Å´ËâØ„ÅÑ")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                        .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                    
                    Text("Êõ∏„ÅçËæº„Åø„ÇÑÁ∑öÂºï„Åç„Åå„Å™„Åè„ÄÅËÉåË°®Á¥ô„Å´ÂÇ∑„Åå„Å™„ÅÑ")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }.tag(2)
                
                VStack {
                    Text("ËâØ„ÅÑ")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                        .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                    
                    Text("Êõ∏„ÅçËæº„Åø„ÇÑÁ∑öÂºï„Åç„ÄÅËÉåË°®Á¥ô„Å´Â§öÂ∞ë„ÅÆÂÇ∑„Åå„ÅÇ„Çã")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }.tag(3)
                
                VStack {
                    Text("ÂèØ")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .lineLimit(/*@START_MENU_TOKEN@*/2/*@END_MENU_TOKEN@*/)
                        .minimumScaleFactor(/*@START_MENU_TOKEN@*/1.0/*@END_MENU_TOKEN@*/)
                    
                    Text("ÂÇ∑„ÇÑÊõ∏„ÅçËæº„Åø„ÅØ„ÅÇ„Çã„ÅåÊñáÂ≠ó„ÅØË™≠„ÇÄ„Åì„Å®„Åå„Åß„Åç„Çã")
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }.tag(4)
            }
    //        }
            .environment(\.editMode, .constant(.active))
            .navigationBarTitle("Êú¨„ÅÆÁä∂ÊÖã„ÇíÈÅ∏Êäû")
                
            Spacer()
            
//            NavigationLink(
//                destination: /*@START_MENU_TOKEN@*/Text("Destination")/*@END_MENU_TOKEN@*/,
//                label: {
//                    /*@START_MENU_TOKEN@*/Text("Navigate")/*@END_MENU_TOKEN@*/
//                })
//        }
        Spacer()
        VStack {
            NavigationLink(
                destination: SendingView(),
                label: {
                    HStack {
                        Image(systemName: "pencil")
                        Text("ÂÄ§‰ªò„Åë")
                    }
                })
        }
    }
}


struct SendingView: View {
    var body: some View {
//        NavigationView {
//            Image(systemName: "icloud.and.arrow.up")
            NavigationLink(
                destination: ResultView(),
                label: {
                    Text("AI„ÅÆÂÄ§ÊÆµ„ÅÆ‰∫àÊ∏¨„ÅØ„ÅäÂæÖ„Å°‰∏≠")
                    .font(.system(size: 25, weight: .bold, design: .default))
                    .bold()
                    .frame(width:360, height: 360)
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(180)
                    .offset(y: -100)
                })
//        }
    }
}


struct CreatingQRCodeView: View {
    var body: some View {
//        NavigationView {
            Image("QRCode")
                .resizable()
                .scaledToFit()
                .frame(width: 350.0, height: 350.0, alignment: .leading)
                .offset(y: -40)
//            Image(systemName: "icloud.and.arrow.up")
//            NavigationLink(
//                destination: ResultView(),
//                label: {
//                    Text("QR„Ç≥„Éº„Éâ„Çí‰ΩúÊàê‰∏≠„Åß„Åô")
//                        .font(.system(size: 25, weight: .bold, design: .default))
//                        .bold()
//                        .frame(width:260, height: 260)
//                        .background(Color.blue)
//                        .foregroundColor(.white)
//                        .cornerRadius(130)
//                        .offset(y: -100)
//                })
                .navigationBarTitle("QR„Ç≥„Éº„Éâ‰ΩúÊàê‰∏≠„Åß„Åô")
//        }
    }
}


struct ResultView: View {
    var body: some View {
//        NavigationView{
            ZStack{
                Color.white.edgesIgnoringSafeArea(.all)
                
                VStack {
                    Text("1815ÂÜÜ")
                        .font(.system(size: 50, weight: .bold, design: .default))
                        .bold()
                        .frame(width:350, height: 110)
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .offset(y: -60)
                    VStack {
                        NavigationLink(
                            destination: CreatingQRCodeView(),
                            label: {
                                Text("Á¢∫ÂÆö")
                                    .font(.system(size: 25, weight: .bold, design: .default))
                                    .bold()
                                    .frame(width:180, height: 50)
                                    .background(Color.red)
                                    .foregroundColor(.white)
                                    .cornerRadius(10)
                                    .offset(y: +10)
                            })
                    }
                    
                    VStack {
                        NavigationLink(
                            destination: ContentView(),
                            label: {
                                Text("„Ç≠„É£„É≥„Çª„É´")
                                    .font(.system(size: 25, weight: .bold, design: .default))
                                    .bold()
                                    .frame(width:180, height: 50)
                                    .background(Color.gray)
                                    .foregroundColor(.white)
                                    .cornerRadius(10)
                                    .offset(y: +30)
                            })
                    
                    }
                }
            }
            .navigationBarTitle("Êú¨„ÅÆÂÄ§ÊÆµ„ÅåÊ±∫„Åæ„Çä„Åæ„Åó„Åü")
//        }
    }
}


struct CheckBox: View {
    
    @Binding var checked: Bool
    private var onTapped: () -> Void
    
    init(checked: Binding<Bool>, onTapped: @escaping () -> Void) {
        self._checked = checked
        self.onTapped = onTapped
    }
    
    var body: some View {
        Button(action: {
            self.$checked.wrappedValue.toggle()
            self.onTapped()
        }) {
            RoundedRectangle(cornerRadius: 8)
                .stroke(Color(.gray), lineWidth: 1)
                .frame(width: 20, height: 20)
                .overlay(showCheckImage())
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    private func showCheckImage() -> AnyView {
        if self.$checked.wrappedValue {
            return AnyView(
                Image("icon_checkbox")
                    .resizable()
                    .renderingMode(.original)
            )
        } else {
            return AnyView(EmptyView())
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}


